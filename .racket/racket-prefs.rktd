(
 (plt:framework-pref:drracket:language-dialog:hierlist-default ("Experimental Languages" "Lazy Racket"))
 (plt:framework-pref:drracket:language-settings ((-32768) (#6(#t print mixed-fraction-e #f #t debug) (default) #0() "#lang racket\n" #t #t ((main) (test)))))
 (plt:framework-pref:drracket:backtrace-window-width 400)
 (plt:framework-pref:drracket:backtrace-window-height 300)
 (plt:framework-pref:drracket:backtrace-window-x 45)
 (plt:framework-pref:drracket:backtrace-window-y 72)
 (plt:framework-pref:framework:search-string ("cond-exp"))
 (plt:framework-pref:framework:exit-when-no-frames #t)
 (|plt:DrRacket-splash-max-width| 751)
 (plt:framework-pref:framework:recently-opened-files/pos
  (
   (#"/home/users/heilma1/PL/heilma1/test2/B3_17.ss" 0 0)
   (#"/home/users/heilma1/PL/heilma1/test2/A18.ss" 0 0)
   (#"/home/users/heilma1/PL/heilma1/test2/A15.ss" 0 0)
   (#"/home/users/heilma1/PL/heilma1/test2/A10.ss" 0 0)
   (#"/home/users/heilma1/PL/heilma1/test1/5.ss" 0 0)
   (#"/home/users/heilma1/PL/heilma1/HW11/3_15.ss" 0 0)
   (#"/home/users/heilma1/PL/heilma1/HW11/3_9.ss" 0 0)
   (#"/home/users/heilma1/PL/heilma1/HW10/3_7.ss" 0 0)
   (#"/home/users/heilma1/PL/heilma1/HW10/3_6.ss" 0 0)
   (#"/home/users/heilma1/PL/heilma1/HW9/bintree.ss" 0 0)
   (#"/home/users/heilma1/PL/heilma1/HW4/HW4_15.ss" 0 0)
   (#"/home/users/heilma1/PL/heilma1/HW4/HW4_19.ss" 0 0)
   (#"/home/users/heilma1/PL/heilma1/HW5/HW5_13.ss" 0 0)
   (#"/home/users/heilma1/PL/heilma1/HW7/2_10.ss" 0 0)
   (#"/home/users/heilma1/PL/heilma1/HW7/2_9.ss" 0 0)
   (#"/home/users/heilma1/PL/heilma1/HW7/2_8.ss" 0 0)
   (#"/home/users/heilma1/PL/heilma1/HW7/2_5.ss" 0 0)
   (#"/home/users/heilma1/PL/heilma1/HW6/HW6.ss" 0 0)
   (#"/home/users/heilma1/PL/heilma1/HW4/HW4_29.ss" 0 0)
   (#"/home/users/heilma1/PL/heilma1/HW5/HW5_31.ss" 0 0)
   (#"/home/users/heilma1/scratch/scratch7.ss" 0 0)
   (#"/home/users/heilma1/PL/HW4_29.ss" 0 0)
   (#"/home/users/heilma1/PL/HW4_24.ss" 0 0)
   (#"/home/users/heilma1/PL/HW4_19.ss" 0 0)
   (#"/home/users/heilma1/PL/HW4_15.ss" 0 0)
  ))
 (plt:framework-pref:drracket:recent-language-names (("Determine language from source" #6(#t print mixed-fraction-e #f #t debug) (default) #0() "#lang racket\n" #t #t ((main) (test))) ("Lazy Racket" . #6(#t constructor mixed-fraction-e #f #t none))))
 (plt:framework-pref:plt:debug-tool:stack/variable-area 9/10)
 (plt:framework-pref:drracket:unit-window-size-percentage 2139353/2623452)
 (plt:framework-pref:drracket:unit-window-size (#t 1003 628))
 (plt:framework-pref:drracket:unit-window-position (0 0 64))
 (plt:framework-pref:framework:verify-exit #t)
 (plt:framework-pref:drracket:console-previous-exprs
  (
   ("duple(3 (ha ha))")
   ("duple(2 3)")
   ("duple(2 3)")
   ("duple(2 3)")
   ("(duple(2 3))")
   ("(duple 2 3)")
   ("(duple (2 3))")
   ("(duple(2 3))")
   ("(duple 2 3)")
   ("(define 2 3)")
   ("(define(2 3))")
   ("duple 2 3")
   ("(duple 2 3)")
   ("(duple(2 3))")
   ("duple 2 3")
   ("duple 2 3")
   ("(duple 2 3)")
   ("(duple(2 3))")
   ("duple 2 3")
   ("duple 2 3")
   ("(duple 2 3)")
   ("(duple 2 3)")
   ("(duple 2 3)")
   ("(duple 2 3)")
   ("(duple 2 3)")
   ("(duple 2 3)")
   ("(duple 2 3)")
   ("(duple 2 3)")
   ("(duple 2 3)")
   ("(duple 2 3)")
   ("(list-set '(a b c d) 2 '(1 2))")
   ("(list-set (1 2) 1 (1 2))")
   ("(list-set '(1 2) 1 '(1 2))")
   ("(list-set '(a b c d) 2 '(1 2)\n            )")
   ("(list-set '(a b c d) 2 '(1 2))")
   ("(list-set '(a b c d) 4 '(1 2))")
   ("(every? number? '(a b c 3 e))")
   ("(every? number? '(a b c 3 e))")
   ("(every? number? '(1 2 3 4 5))")
   ("(sort-lst '(8 2 5 2 3))")
   ("invert('((a 1) (a 2) (1 b) (2 b)))")
   ("(invert('((a 1) (a 2) (1 b) (2 b))))")
   ("(invert '((a 1) (a 2) (1 b) (2 b)))")
   ("(invert '((a 1) (a 2) (1 b) (2 b)))")
   ("(invert '((a 1) (a 2)))")
   ("(invert '((a 1) (a 2)))")
   ("(invert '((a 1) (a 2)))")
   ("(invert '((a 1) (a 2)))")
   ("(invert '((a 1) (a 2)))")
   ("(invert '((a 1) (a 2)))")
   ("(down '(1 2 3))")
   ("(down '(1 2 3))")
   ("(duple 2 3)")
   ("(rac '(a b 1 2 (c d) #f 5))")
   ("(rac '(1 (2 (3 (4 (5))))))")
   ("(rac '(a b 1 2 (c d) #f 5))")
   ("(rac '(1 (2 (3 (4))) 5))")
   ("(string-length-list '(\"string\" \"length\" \"is\" \"four\"))")
   ("(string-length-list '('string 'length 'is 'four))")
   ("(string-length-list '(\"string\" \"length\" \"is\" \"four\"))")
   ("(string-length-list '(\"string\" \"length\" \"is\" \"four\"))")
   ("(string-length-list '(\"This\" (\"is\" \"a\" (\"list\" (\"of\")) \"strings\")))")
   ("(descend-list 5)")
   ("(descend-list 5)")
   ("(descend-list 0)")
   ("(descend-list 20)")
   ("(descend-list 1)")
   ("(repeat? '(1 1 1 1 1 1))")
   ("(repeat? '(1 1 1 1 1 2))")
   ("(repeat? '(2 1 1 1 1 1))")
   ("(repeat? '(1 1 2 2 1 1))")
   ("(repeat? '(1 (1 (1 1) (1)) 1))")
   ("(display (run \"let* x = 30\nin let* x = -(x,1) y = -(x,2)\nin -(x,y)\"))")
   ("(display (run \"let x = 30\nin let* x = -(x,1) y = -(x,2)\nin -(x,y)\"))")
   ("(display (run \"let* x = 3\"))")
   ("(display (run \"let* x = 1\"))")
   ("(display (run \"let* x=1\"))")
   ("(display (run \"let* x = 1\"))")
   ("(display (run \"let* x=1 in #t\"))")
   ("(display (run \"let* x=1 in const-exp(1)\"))")
   ("(display (run \"let* x=1 in x\"))")
   ("(display (run \"let* x=1 in x\"))")
   ("(display (run \"let* x=1 y=2 in -(x,y)\"))")
   ("(display (run \"let* x=1 in -(x,1)\"))")
   ("(display (run \"let* x=1 y=2 in y\"))")
   ("(display (run \"let x=2 y=3 in y\"))")
   ("(display (run \"let* x=2 y=3 in y\"))")
   ("(display (run \"let* x=2 y=3 in -(y,x)\"))")
   ("(display (run \"let* x=2 y=3 in x\"))")
  ))
)
