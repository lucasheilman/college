#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;

vector <vector<int>> recur(vector <vector <int>> vect, vector <vector <int>> visited, int currentval){
  int count = 0;
  //for(int i = 0; i < vect[currentval].size(); i++){
    //for(int j = 0; j < visited.size(); j++){
      //if(vect[
  if(visited.size() == vect.size()-1){
    vector <int> idk;
    idk.push_back(currentval);
    visited.push_back(idk);
    return visited;
  }
  //else if(visited{});
  bool gotval = 0;
  for(int x = 0; x < vect.size(); x++){
    if(!(find(visited.begin(), visited.end(),vect[x])!=visited.end()) && find(vect[currentval].begin(),vect[currentval].end(),vect[x])!=vect[currentval].end()){
      
      visited.push_back(recur(vect, visited, x));
      gotval = 1;
      break;
    }
  }
  if(gotval == 0){
    visited.push_back(recur(vect,visited, visited.back()));
  }
  return visited;
}
    
    
int main(){
  string junk;
  cin >> junk;
  cin >> junk;
  int vertice_count;
  cin >> vertice_count;
  int edge_count;
  cin >> edge_count;
  int first_vert;
  int second_vert;
  vector <vector <int>> adlst;
  adlst.resize(vertice_count);
  for(int i = 0; i < vertice_count-1; i++){
    cin >> junk;
    cin >> first_vert;
    cin >> second_vert;
    adlst[first_vert].push_back(second_vert);
    adlst[second_vert].push_back(first_vert); 
  }
  int start;
  cin >> start;
  vector <vector <int>> visited;
  recur(adlst, visited, start);
  cout << "p edge\t" << vertice_count << "\t" << edge_count << endl;
  for(int i = 0; i < adlst.size(); i++){
    for(int j = 0; j < adlst[i].size();j++){
      if(i < adlst[i][j]){
	cout << "e" <<"\t" <<  i << "\t" << adlst[i][j] << endl;
      }
    }
  }
}
      
