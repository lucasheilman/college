#include <iostream>
#include <vector>
using namespace std;

struct node
{
  int a,b,c;
};

/* We use add and sub for handling the pouring into different sized
   containers */
int add (int a, int b, int base) {
  if (a+b >= base) return base;
  else return a+b;
}

int sub (int a, int b, int base) {
  int diff = add(a,b,base)-b;
  // if (a-diff <= 0) return 0;  // could be a problem
  return a-diff;
}

/* Returns the possible paths from a certain combination of containers */
vector <node> pour (node & n) {
  vector <node> combos;
  node n1 = {sub(n.a,n.b,7), add(n.a,n.b,7), n.c};
  node n2 = {sub(n.a,n.c,4), n.b, add(n.a,n.c,4)};
  node n3 = {add(n.b,n.a,10), sub(n.b,n.a,10), n.c};
  node n4 = {n.a, sub(n.b,n.c,4), add(n.b,n.c,4)};
  node n5 = {add(n.c,n.a,10), n.b, sub(n.c,n.a,10)};
  node n6 = {n.a, add(n.c,n.b,7), sub(n.c,n.b,7)};
  combos.push_back(n6);
  combos.push_back(n2);
  combos.push_back(n3);
  combos.push_back(n4);
  combos.push_back(n5);
  combos.push_back(n1);
  return combos;
}

/* Recursive function that performs DFS to find first possible path
   from current node n that satisfies the criteria */
bool search (vector<node>& visited, node & n) {
  //if(visited.size() > 6){
  // return false;
  //}
  if (n.b == 2 || n.c == 2 && visited.size() == 7) {
    for(int i = 1; i < visited.size(); i++){
      cout << visited[i].a << " " << visited[i].b << " " << visited[i].c << " " << endl;
    }
    cout << n.a << " " << n.b << " " << n.c << endl;
    return true;
  }

  // Check if already seen
  for (int i =0; i<visited.size(); i++) {
    if(n.a==visited[i].a && n.b==visited[i].b && n.c==visited[i].c) return false;
  }

  //cout << n.a << "  " << n.b << " " << n.c << endl;

  // add node to visited
  if(visited.size() < 6){
     visited.push_back(n);
  }
  vector<node> combos = pour(n);
  for (int j = 0; j < combos.size(); j++) {
    bool path = search(visited, combos[j]);
    if(path) {
      return true;
    }
  }

  return false;
}

int main () {
  node first = {0,7,4};
  vector <node> visited;
  node n1 = {-1,-1,-1};
  visited.push_back(n1);

  bool realResults = search(visited, first);
  cout << "Was it visited? 1 = yes, 0 = no : " << realResults << endl;
}
